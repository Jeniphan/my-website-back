generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Contacts {
  id            String        @id @db.VarChar(255)
  platFormName  String?       @db.VarChar(255)
  platFormId    String        @db.VarChar(255)
  authorId      String?       @db.VarChar(255)
  platFormLink  String?       @db.VarChar(255)
  createAt      DateTime?     @db.DateTime(0)
  updateAt      DateTime?     @db.DateTime(0)
  Users         Users?        @relation(fields: [authorId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "Contacts_ibfk_1")
  PlatFormTypes PlatFormTypes @relation(fields: [platFormId], references: [id], onUpdate: Restrict, map: "fk_contacts_platFormType")

  @@index([authorId], map: "authorId")
  @@index([platFormId], map: "platFormId")
}

model Contents {
  id         String    @id @db.VarChar(255)
  title      String?   @db.VarChar(255)
  name       String?   @db.VarChar(255)
  skips      String?   @db.VarChar(255)
  content    String?   @db.VarChar(255)
  profilePic String?   @db.VarChar(255)
  authorId   String?   @db.VarChar(255)
  createAt   DateTime? @db.DateTime(0)
  updateAt   DateTime? @db.DateTime(0)
  isActive   Boolean
  Users      Users?    @relation(fields: [authorId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "Contents_ibfk_1")

  @@index([authorId], map: "authorId")
}

model Educations {
  id       String    @id @db.VarChar(255)
  start    String?   @db.VarChar(255)
  end      String?   @db.VarChar(255)
  name     String?   @db.VarChar(255)
  marjor   String?   @db.VarChar(255)
  link     String?   @db.VarChar(255)
  authorId String?   @db.VarChar(255)
  createAt DateTime? @db.DateTime(0)
  updateAt DateTime? @db.DateTime(0)
  order    Int       @default(0)
  Users    Users?    @relation(fields: [authorId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "Educations_ibfk_1")

  @@index([authorId], map: "authorId")
}

model MyApplications {
  id    String  @id @db.VarChar(255)
  name  String? @db.VarChar(255)
  link  String? @db.VarChar(255)
  image String? @db.VarChar(255)
}

model Personals {
  id          String    @id @db.VarChar(255)
  title       String?   @db.VarChar(255)
  skips       String?   @db.VarChar(255)
  content     String?   @db.VarChar(255)
  resume      String?   @db.VarChar(255)
  personalPic String?   @db.VarChar(255)
  authorId    String?   @db.VarChar(255)
  createAt    DateTime? @db.DateTime(0)
  updateAt    DateTime? @db.DateTime(0)
  Users       Users?    @relation(fields: [authorId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "Personals_ibfk_1")

  @@index([authorId], map: "authorId")
}

model Projects {
  id          String    @id @db.VarChar(255)
  title       String?   @db.VarChar(255)
  date        DateTime? @db.DateTime(0)
  discription String?   @db.VarChar(255)
  link        String?   @db.VarChar(255)
  authorId    String?   @db.VarChar(255)
  createAt    DateTime? @db.DateTime(0)
  updateAt    DateTime? @db.DateTime(0)
  Users       Users?    @relation(fields: [authorId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "Projects_ibfk_1")

  @@index([authorId], map: "authorId")
}

model Skills_back {
  id          String                   @id @db.VarChar(255)
  title       String?                  @db.VarChar(255)
  discription Skills_back_discription?
  authorId    String?                  @db.VarChar(255)
  createAt    DateTime?                @db.DateTime(0)
  updateAt    DateTime?                @db.DateTime(0)
  order       Int                      @default(0)
  Users       Users?                   @relation(fields: [authorId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "Skills_back_ibfk_1")

  @@index([authorId], map: "authorId")
}

model Skills_front {
  id          String                    @id @db.VarChar(255)
  title       String?                   @db.VarChar(255)
  discription Skills_front_discription?
  authorId    String?                   @db.VarChar(255)
  createAt    DateTime?                 @db.DateTime(0)
  updateAt    DateTime?                 @db.DateTime(0)
  order       Int                       @default(0)
  Users       Users?                    @relation(fields: [authorId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "Skills_front_ibfk_1")

  @@index([authorId], map: "authorId")
}

model Skills_soft {
  id          String                   @id @db.VarChar(255)
  title       String?                  @db.VarChar(255)
  discription Skills_soft_discription?
  authorId    String?                  @db.VarChar(255)
  createAt    DateTime?                @db.DateTime(0)
  updateAt    DateTime?                @db.DateTime(0)
  order       Int                      @default(0)
  Users       Users?                   @relation(fields: [authorId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "Skills_soft_ibfk_1")

  @@index([authorId], map: "authorId")
}

model Users {
  id           String         @id @db.VarChar(255)
  name         String?        @db.VarChar(255)
  username     String?        @db.VarChar(255)
  password     String?        @db.VarChar(255)
  email        String?        @db.VarChar(255)
  phoneNumber  String?        @db.VarChar(255)
  role         Users_role?
  Contacts     Contacts[]
  Contents     Contents[]
  Educations   Educations[]
  Personals    Personals[]
  Projects     Projects[]
  Skills_back  Skills_back[]
  Skills_front Skills_front[]
  Skills_soft  Skills_soft[]
  Works        Works[]
}

model Works {
  id       String    @id @db.VarChar(255)
  start    String?   @db.VarChar(255)
  end      String?   @db.VarChar(255)
  name     String?   @db.VarChar(255)
  marjor   String?   @db.VarChar(255)
  link     String?   @db.VarChar(255)
  authorId String?   @db.VarChar(255)
  createAt DateTime? @db.DateTime(0)
  updateAt DateTime? @db.DateTime(0)
  order    Int       @default(0)
  Users    Users?    @relation(fields: [authorId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "Works_ibfk_1")

  @@index([authorId], map: "authorId")
}

model PlatFormTypes {
  id           String     @id @db.VarChar(255)
  platFormName String?    @db.VarChar(255)
  platFormSlug String?    @unique(map: "platFormSlug") @db.VarChar(255)
  Contacts     Contacts[]
}

enum Skills_back_discription {
  Proficient
  Intermediate
  Basic
}

enum Skills_front_discription {
  Proficient
  Intermediate
  Basic
}

enum Skills_soft_discription {
  Proficient
  Intermediate
  Basic
}

enum Users_role {
  admin
  user
}
